name: "Terraform"

on:
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    env:
      TF_CLOUD_ORGANIZATION: ${{ vars.TF_ORGANIZATION }}
      TF_VAR_application_stage: ${{ github.base_ref == 'main' && 'prod' || github.base_ref }}
      TF_VAR_aws_region: ${{vars.AWS_REGION}}
      TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 1.4.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Load AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure AWS credentials file
        run: |
          mkdir .aws
          echo [default] >> .aws/credentials
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .aws/credentials
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .aws/credentials
          echo AWS_REGION=$AWS_REGION >> .aws/credentials

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        continue-on-error: true
        run: |
          export TF_WORKSPACE=${TF_VAR_application_name}-${TF_VAR_application_stage}
          terraform init -input=false

      - name: TerraformValidate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          export TF_WORKSPACE=${TF_VAR_application_name}-${TF_VAR_application_stage}
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1